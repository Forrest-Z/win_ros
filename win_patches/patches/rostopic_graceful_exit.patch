diff -NBaur -x .svn -x '*.pyc' ros_comm/tools/rostopic/src/rostopic/__init__.py ros_comm_rostopic/tools/rostopic/src/rostopic/__init__.py
--- ros_comm/tools/rostopic/src/rostopic/__init__.py	2012-07-13 07:46:47.740037530 +0900
+++ ros_comm_rostopic/tools/rostopic/src/rostopic/__init__.py	2012-07-13 09:17:19.318971276 +0900
@@ -192,7 +192,7 @@
         sub = rospy.Subscriber(real_topic, rospy.AnyMsg, rt.callback_hz)        
     print("subscribed to [%s]"%real_topic)
     while not rospy.is_shutdown():
-        time.sleep(1.0)
+        rospy.rostime.wallsleep(1.0) # just time.sleep() with interrupt handling
         rt.print_hz()
     
 class ROSTopicBandwidth(object):
@@ -265,7 +265,7 @@
     sub = rospy.Subscriber(real_topic, rospy.AnyMsg, rt.callback)
     print("subscribed to [%s]"%real_topic)
     while not rospy.is_shutdown():
-        time.sleep(1.0)
+        rospy.rostime.wallsleep(1.0)
         rt.print_bw()
 
 # TODO: port to the version I wrote for rxplot instead as it should be more efficient
@@ -335,7 +335,7 @@
             if topic_type:
                 return topic_type, real_topic, msg_eval
             else:
-                time.sleep(0.1)
+                rospy.rostime.wallsleep(0.1)
     return None, None, None
 
 def get_topic_class(topic, blocking=False):
@@ -676,7 +676,7 @@
                     callback_echo.count == 0 and \
                     not rospy.is_shutdown() and \
                     not callback_echo.done:
-                time.sleep(0.1)
+                rospy.rostime.wallsleep(0.1)
 
             if callback_echo.count == 0 and \
                     not rospy.is_shutdown() and \
@@ -684,7 +684,7 @@
                 sys.stderr.write("WARNING: no messages received and simulated time is active.\nIs /clock being published?\n")
 
         while not rospy.is_shutdown() and not callback_echo.done:
-            time.sleep(0.1)
+            rospy.rostime.wallsleep(0.1)
 
 _caller_apis = {}
 def get_api(master, caller_id):
@@ -1356,7 +1356,7 @@
 def wait_for_subscriber(pub, timeout):
     timeout_t = time.time() + timeout
     while pub.get_num_connections() == 0 and timeout_t > time.time():
-        time.sleep(0.01)
+        rospy.rostime.wallsleep(0.01)
 
 def param_publish_once(pub, msg_class, param_name, verbose):
     if not rospy.has_param(param_name):
